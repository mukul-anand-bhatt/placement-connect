// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // relationMode = "prisma"
}



model User {
  user_id     Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  password    String
  role        Role     @default(STUDENT)
  student     Student? // One-to-one relation with Student (optional)
  
  @@map("users")
}

model Student {
  student_id    Int      @id @default(autoincrement())
  phone_number  String?
  department    String
  CGPA          Float
  skills        String[]
  resume_link   String?
  applied_jobs  JobApplication[]  // Relationship to JobApplication model
  user_id       Int       @unique
  user          User      @relation(fields: [user_id], references: [user_id])  // Correct reference to user_id in the User model

  @@map("students")
}

enum Role {
  ADMIN
  STUDENT
}

model JobApplication {
  application_id  Int      @id @default(autoincrement())
  student         Student  @relation(fields: [student_id], references: [student_id])
  student_id      Int
  job             Job      @relation(fields: [job_id], references: [job_id])
  job_id          Int
  application_date DateTime @default(now())
  status          String    // Can be "Pending", "Selected", "Rejected"
}

model Job {
  job_id          Int      @id @default(autoincrement())
  company_id      Int
  title           String
  job_description String
  job_location    String
  salary          Float
  required_skills String[]
  min_CGPA        Float
  application_deadline DateTime
  posted_date     DateTime @default(now())
  
  applications    JobApplication[]  // Relationship to JobApplication
}
